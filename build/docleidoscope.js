// Generated by CoffeeScript 1.9.2

/*! Docleidoscope 0.0.1 //// MIT Licence //// https://github.com/richplastow/docleidoscope#readme */

(function() {
  var Client, Main, Runtime, Server, ª, ªA, ªB, ªC, ªE, ªF, ªN, ªO, ªR, ªS, ªU, ªV, ªX, ªex, ªhas, ªredefine, ªtype, ªuid,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ªC = 'Docleidoscope';

  ªV = '0.0.1';

  ªA = 'array';

  ªB = 'boolean';

  ªE = 'error';

  ªF = 'function';

  ªN = 'number';

  ªO = 'object';

  ªR = 'regexp';

  ªS = 'string';

  ªU = 'undefined';

  ªX = 'null';

  ª = console.log.bind(console);

  ªex = function(x, a, b) {
    var pos;
    if (-1 === (pos = a.indexOf(x))) {
      return x;
    } else {
      return b.charAt(pos);
    }
  };

  ªhas = function(h, n, t, f) {
    if (t == null) {
      t = true;
    }
    if (f == null) {
      f = false;
    }
    if (-1 !== h.indexOf(n)) {
      return t;
    } else {
      return f;
    }
  };

  ªtype = function(x) {
    return {}.toString.call(x).match(/\s([a-z|A-Z]+)/)[1].toLowerCase();
  };

  ªuid = function(p) {
    return p + '_' + (Math.random() + '1111111111111111').slice(2, 18);
  };

  ªredefine = function(obj, name, value, kind) {
    switch (kind) {
      case 'constant':
        return Object.defineProperty(obj, name, {
          value: value,
          enumerable: true
        });
      case 'private':
        return Object.defineProperty(obj, name, {
          value: value,
          enumerable: false
        });
    }
  };

  Main = (function() {
    Main.prototype.C = ªC;

    Main.prototype.toString = function() {
      return "[object " + this.C + "]";
    };

    function Main(config) {
      if (ªO !== ªtype(config)) {
        throw new Error(this.C + ": `config` must be type 'object'");
      }
      this.env = config.env;
      if (ªS !== ªtype(this.env)) {
        throw new Error(this.C + ": `config.env` must be type 'string'");
      }
      if (!/^client|server$/.test(this.env)) {
        throw new Error(this.C + ": `config.env` must be 'client' or 'server'");
      }
      this.runtime = new ('client' === this.env ? Client : Server)(config);
    }

    Main.prototype.init = function(xx) {};

    return Main;

  })();

  Runtime = (function() {
    Runtime.prototype.C = 'Runtime';

    Runtime.prototype.toString = function() {
      return "[object " + this.C + "]";
    };

    function Runtime(config) {
      if (ªO !== ªtype(config)) {
        throw new Error(this.C + ": `config` must be type 'object'");
      }
      this.xx = 'xx';
    }

    Runtime.prototype.init = function(xx) {};

    return Runtime;

  })();

  Client = (function(superClass) {
    extend(Client, superClass);

    Client.prototype.C = 'Client';

    function Client(config) {
      Client.__super__.constructor.call(this, config);
      this.env = config.env;
      if (ªS !== ªtype(this.env)) {
        throw new Error(this.C + ": `config.env` must be type 'string'");
      }
      if (!/^client$/.test(this.env)) {
        throw new Error(this.C + ": `config.env` must be 'client'");
      }
      this.xx = 'xx';
    }

    Client.prototype.init = function(xx) {};

    return Client;

  })(Runtime);

  Server = (function(superClass) {
    extend(Server, superClass);

    Server.prototype.C = 'Server';

    function Server(config) {
      Server.__super__.constructor.call(this, config);
      this.env = config.env;
      if (ªS !== ªtype(this.env)) {
        throw new Error(this.C + ": `config.env` must be type 'string'");
      }
      if (!/^server$/.test(this.env)) {
        throw new Error(this.C + ": `config.env` must be 'server'");
      }
      this.xx = 'xx';
    }

    Server.prototype.init = function(xx) {};

    return Server;

  })(Runtime);

  if (ªF === typeof define && define.amd) {
    define(function() {
      return Main;
    });
  } else if (ªO === typeof module && module && module.exports) {
    module.exports = Main;
  } else {
    this[ªC] = Main;
  }

}).call(this);
